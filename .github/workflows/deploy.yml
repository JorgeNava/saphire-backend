name: Deploy Infra y Lambdas

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TABLE_PREFIX: Zafira

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Clonamos el repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2) Configuramos credenciales AWS *antes* de cualquier llamada a AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 3) Instalamos Node.js para empaquetar las Lambdas
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 4) Build & Zip de cada Lambda
      - name: Build & Zip Lambdas
        run: |
          rm -rf build
          mkdir build
          for dir in lambdas/*/*; do
            if [ -d "$dir" ]; then
              fn=$(basename "$dir")
              zip_dir=build/${TABLE_PREFIX}-${fn}
              mkdir -p "$zip_dir"
              cp -r "${dir}/." "$zip_dir/"
              pushd "$zip_dir"
                npm install --omit=dev
                zip -r "../${TABLE_PREFIX}-${fn}.zip" .
              popd
            fi
          done

      # 5) Instalamos Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # 6) Generar terraform.tfvars con los secrets
      - name: Generate terraform.tfvars
        working-directory: ./terraform
        run: |
          cat > terraform.tfvars <<EOF
          aws_region                          = "${{ env.AWS_REGION }}"
          table_prefix                        = "${{ env.TABLE_PREFIX }}"
          aws_dynamodb_table_messages         = "${{ secrets.AWS_DYNAMODB_TABLE_MESSAGES }}"
          aws_dynamodb_table_tags             = "${{ secrets.AWS_DYNAMODB_TABLE_TAGS }}"
          aws_dynamodb_table_lists            = "${{ secrets.AWS_DYNAMODB_TABLE_LISTS }}"
          aws_dynamodb_table_users            = "${{ secrets.AWS_DYNAMODB_TABLE_USERS }}"
          aws_dynamodb_table_notes            = "${{ secrets.AWS_DYNAMODB_TABLE_NOTES }}"
          aws_dynamodb_table_thoughts         = "${{ secrets.AWS_DYNAMODB_TABLE_THOUGHTS }}"
          aws_dynamodb_table_actions_log      = "${{ secrets.AWS_DYNAMODB_TABLE_ACTIONS_LOG }}"
          aws_s3_message_attachments_bucket   = "${{ secrets.AWS_S3_MESSAGE_ATTACHMENTS_BUCKET }}"
          aws_s3_notes_attachments_bucket     = "${{ secrets.AWS_S3_NOTES_ATTACHMENTS_BUCKET }}"
          openai_api_base_url                 = "${{ secrets.OPENAI_API_BASE_URL }}"
          openai_api_key_aws_use              = "${{ secrets.OPENAI_API_KEY_AWS_USE }}"
          lambda_name_create_thought          = "${{ secrets.LAMBDA_NAME_CREATE_THOUGHT }}"
          lambda_name_create_list_through_ai  = "${{ secrets.LAMBDA_NAME_CREATE_LIST_THROUGH_AI }}"
          lambda_name_perform_research        = "${{ secrets.LAMBDA_NAME_PERFORM_RESEARCH }}"
          app_feature_flag_delete_audio_after_transcribe = "${{ secrets.APP_FEATURE_FLAG_DELETE_AUDIO_AFTER_TRANSCRIBE }}"
          EOF

      # 7) Terraform Init con backend configurado vÃ­a CLI
      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=zafira-terraform-states" \
            -backend-config="key=env/${{ env.TABLE_PREFIX }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=zafira-terraform-locks" \
            -backend-config="encrypt=true"

      # 8) (Opcional) Verifica cambios
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      # 9) Aplica la infraestructura
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
